generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?
  User                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Liked         Liked[]
  Order         Order[]
  Session       Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guestbook {
  id            Int       @id @default(autoincrement())
  email         String?
  created_by    String?   @db.VarChar(50)
  body          String?
  last_modified DateTime? @db.Date
}

model Liked {
  id     String  @id
  title  String
  price  Float?
  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Order {
  id            String    @id
  title         String
  price         Float?
  sold          Boolean   @default(false)
  userId        String?
  purchasedDate DateTime?
  User          User?     @relation(fields: [userId], references: [id])
}
