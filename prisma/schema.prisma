generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Guestbook {
  id            Int       @id @default(autoincrement())
  email         String?
  created_by    String?   @db.VarChar(50)
  body          String?
  last_modified DateTime? @db.Date
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        events[]
  registrations registrations[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model category {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  events events[]
}

model events {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  location      String?
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  imageUrl      String
  startDateTime DateTime?       @default(now()) @db.Timestamptz(6)
  endDateTime   DateTime?       @default(now()) @db.Timestamptz(6)
  url           String?
  categoryId    Int?
  organizerId   String?
  slug          String?         @unique
  category      category?       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User          User?           @relation(fields: [organizerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_organizer")
  registrations registrations[]
}

model registrations {
  eventId     Int
  userId      String
  description String?
  events      events  @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventid")
  User        User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userid")

  @@id([eventId, userId])
}
